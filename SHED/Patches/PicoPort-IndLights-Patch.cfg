@PART[PicoPortPlus]:NEEDS[IndicatorLights]
{
    	MODULE
	{
		name = ModuleControllableEmissive
		target = PicoLED
		emissiveName = dockLED
	}
	MODULE {
		name = ModuleToggleLED
		activeColor = ModuleDockingCrossfeedIndicator
		inactiveColor = $Off
		defaultActionGroup = Light
	}
	
	// This provides detection of the docking port state. We don't specify an
	// emissiveName here because it's not controlling the light directly (we're
	// just using it as an input to other modules).
	MODULE {
		name = ModuleDockingCrossfeedIndicator
	}
	
	// This detects the docking state. We make this the "root" controller that
	// actually drives the emissive color, because we want the indicator to blink
	// when it's acquiring or disengaging, regardless of the toggle setting.
	// If we're in the "ready" (or docked) state, then we'll take our input
	// from the toggle.
	MODULE {
		name = ModuleDockingStateIndicator
		emissiveName = dockLED
		readyColor = ModuleToggleLED
		acquireColor = blink(ModuleDockingCrossfeedIndicator, 100, $Off, 100)
		disengageColor = blink(ModuleDockingCrossfeedIndicator, 120, $Off, 1080)
	}
}
@PART[PicoPortBasic]:NEEDS[IndicatorLights]
{
    	MODULE
	{
		name = ModuleControllableEmissive
		target = microLED
		emissiveName = dockLED
	}
	MODULE {
		name = ModuleToggleLED
		activeColor = ModuleDockingCrossfeedIndicator
		inactiveColor = $Off
		defaultActionGroup = Light
	}
	
	// This provides detection of the docking port state. We don't specify an
	// emissiveName here because it's not controlling the light directly (we're
	// just using it as an input to other modules).
	MODULE {
		name = ModuleDockingCrossfeedIndicator
	}
	
	// This detects the docking state. We make this the "root" controller that
	// actually drives the emissive color, because we want the indicator to blink
	// when it's acquiring or disengaging, regardless of the toggle setting.
	// If we're in the "ready" (or docked) state, then we'll take our input
	// from the toggle.
	MODULE {
		name = ModuleDockingStateIndicator
		emissiveName = dockLED
		readyColor = ModuleToggleLED
		acquireColor = blink(ModuleDockingCrossfeedIndicator, 100, $Off, 100)
		disengageColor = blink(ModuleDockingCrossfeedIndicator, 120, $Off, 1080)
	}
}
@PART[PicoPortM]:NEEDS[IndicatorLights]
{
    	MODULE
	{
		name = ModuleControllableEmissive
		target = PicoLED
		emissiveName = dockLED
	}
	MODULE {
		name = ModuleToggleLED
		activeColor = ModuleDockingCrossfeedIndicator
		inactiveColor = $Off
		defaultActionGroup = Light
	}
	
	// This provides detection of the docking port state. We don't specify an
	// emissiveName here because it's not controlling the light directly (we're
	// just using it as an input to other modules).
	MODULE {
		name = ModuleDockingCrossfeedIndicator
	}
	
	// This detects the docking state. We make this the "root" controller that
	// actually drives the emissive color, because we want the indicator to blink
	// when it's acquiring or disengaging, regardless of the toggle setting.
	// If we're in the "ready" (or docked) state, then we'll take our input
	// from the toggle.
	MODULE {
		name = ModuleDockingStateIndicator
		emissiveName = dockLED
		readyColor = ModuleToggleLED
		acquireColor = blink(ModuleDockingCrossfeedIndicator, 100, $Off, 100)
		disengageColor = blink(ModuleDockingCrossfeedIndicator, 120, $Off, 1080)
	}
}
@PART[PicoPortF]:NEEDS[IndicatorLights]
{
    	MODULE
	{
		name = ModuleControllableEmissive
		target = PicoLED
		emissiveName = dockLED
	}
	MODULE {
		name = ModuleToggleLED
		activeColor = ModuleDockingCrossfeedIndicator
		inactiveColor = $Off
		defaultActionGroup = Light
	}
	
	// This provides detection of the docking port state. We don't specify an
	// emissiveName here because it's not controlling the light directly (we're
	// just using it as an input to other modules).
	MODULE {
		name = ModuleDockingCrossfeedIndicator
	}
	
	// This detects the docking state. We make this the "root" controller that
	// actually drives the emissive color, because we want the indicator to blink
	// when it's acquiring or disengaging, regardless of the toggle setting.
	// If we're in the "ready" (or docked) state, then we'll take our input
	// from the toggle.
	MODULE {
		name = ModuleDockingStateIndicator
		emissiveName = dockLED
		readyColor = ModuleToggleLED
		acquireColor = blink(ModuleDockingCrossfeedIndicator, 100, $Off, 100)
		disengageColor = blink(ModuleDockingCrossfeedIndicator, 120, $Off, 1080)
	}
}
